[
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "ollama",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ollama",
        "description": "ollama",
        "detail": "ollama",
        "documentation": {}
    },
    {
        "label": "LLMProvider",
        "importPath": "askmydb.llm.base",
        "description": "askmydb.llm.base",
        "isExtraImport": true,
        "detail": "askmydb.llm.base",
        "documentation": {}
    },
    {
        "label": "LLMProvider",
        "importPath": "askmydb.llm.base",
        "description": "askmydb.llm.base",
        "isExtraImport": true,
        "detail": "askmydb.llm.base",
        "documentation": {}
    },
    {
        "label": "LLMProvider",
        "importPath": "askmydb.llm.base",
        "description": "askmydb.llm.base",
        "isExtraImport": true,
        "detail": "askmydb.llm.base",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "openai",
        "description": "openai",
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "inspect",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "execute_sql",
        "importPath": "askmydb.sql.executor",
        "description": "askmydb.sql.executor",
        "isExtraImport": true,
        "detail": "askmydb.sql.executor",
        "documentation": {}
    },
    {
        "label": "load_schema",
        "importPath": "askmydb.schema.loader",
        "description": "askmydb.schema.loader",
        "isExtraImport": true,
        "detail": "askmydb.schema.loader",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "AskMyDB",
        "importPath": "askmydb",
        "description": "askmydb",
        "isExtraImport": true,
        "detail": "askmydb",
        "documentation": {}
    },
    {
        "label": "AskMyDB",
        "importPath": "askmydb",
        "description": "askmydb",
        "isExtraImport": true,
        "detail": "askmydb",
        "documentation": {}
    },
    {
        "label": "AskMyDB",
        "importPath": "askmydb",
        "description": "askmydb",
        "isExtraImport": true,
        "detail": "askmydb",
        "documentation": {}
    },
    {
        "label": "DummyLLM",
        "importPath": "askmydb.llm.dummy",
        "description": "askmydb.llm.dummy",
        "isExtraImport": true,
        "detail": "askmydb.llm.dummy",
        "documentation": {}
    },
    {
        "label": "OllamaProvider",
        "importPath": "askmydb.llm.ollama_provider",
        "description": "askmydb.llm.ollama_provider",
        "isExtraImport": true,
        "detail": "askmydb.llm.ollama_provider",
        "documentation": {}
    },
    {
        "label": "OllamaProvider",
        "importPath": "askmydb.llm.ollama_provider",
        "description": "askmydb.llm.ollama_provider",
        "isExtraImport": true,
        "detail": "askmydb.llm.ollama_provider",
        "documentation": {}
    },
    {
        "label": "OpenAIProvider",
        "importPath": "askmydb.llm.openai_provider",
        "description": "askmydb.llm.openai_provider",
        "isExtraImport": true,
        "detail": "askmydb.llm.openai_provider",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "LLMProvider",
        "kind": 6,
        "importPath": "askmydb.llm.base",
        "description": "askmydb.llm.base",
        "peekOfCode": "class LLMProvider(ABC):\n    \"\"\"\n    Abstract base class for LLM providers.\n    \"\"\"\n    @abstractmethod\n    def generate_sql(self, prompt: str, schema:str) -> str:\n        \"\"\"\n        Generate SQL query from the given prompt and schema.\n        Args:\n            prompt (str): The natural language prompt.",
        "detail": "askmydb.llm.base",
        "documentation": {}
    },
    {
        "label": "DummyLLM",
        "kind": 6,
        "importPath": "askmydb.llm.dummy",
        "description": "askmydb.llm.dummy",
        "peekOfCode": "class DummyLLM(LLMProvider):\n    def generate_sql(self, prompt: str, schema: str) -> str:\n        # Fake SQL just to test the flow\n        return \"SELECT * FROM users\"",
        "detail": "askmydb.llm.dummy",
        "documentation": {}
    },
    {
        "label": "OllamaProvider",
        "kind": 6,
        "importPath": "askmydb.llm.ollama_provider",
        "description": "askmydb.llm.ollama_provider",
        "peekOfCode": "class OllamaProvider(LLMProvider):\n    \"\"\"Ollama AI model provider.\"\"\"\n    def __init__(self, base_url: str = \"http://localhost:11434\", model: str = \"llama3\", temperature: float = 0.0):\n        try:\n            self.base_url = base_url\n            self.model = model\n            self.temperature = temperature\n        except Exception as e:\n            raise RuntimeError(f\"OllamaProvider.__init__ error: {e}\") from e\n    def generate_sql(self, prompt: str, schema: str) -> str:",
        "detail": "askmydb.llm.ollama_provider",
        "documentation": {}
    },
    {
        "label": "OpenAIProvider",
        "kind": 6,
        "importPath": "askmydb.llm.openai_provider",
        "description": "askmydb.llm.openai_provider",
        "peekOfCode": "class OpenAIProvider(LLMProvider):\n    \"\"\"OpenAI LLM provider.\"\"\"\n    def __init__(self, api_key: str, base_url: str = 'https://api.openai.com/v1', model: str = \"gpt-3.5-turbo\",temperature=0.0):\n        \"\"\"\n        Initialize OpenAIProvider with API key and model.\n        \"\"\"\n        self.model = model\n        self.temperature = temperature\n        self.client = OpenAI(\n            api_key=api_key,",
        "detail": "askmydb.llm.openai_provider",
        "documentation": {}
    },
    {
        "label": "build_sql_prompt",
        "kind": 2,
        "importPath": "askmydb.llm.sql_prompt",
        "description": "askmydb.llm.sql_prompt",
        "peekOfCode": "def build_sql_prompt(user_question: str, schema: str) -> str:\n    \"\"\"\n    Build a consistent prompt for SQL generation from any LLM provider.\n    \"\"\"\n    return (\n        \"You are a SQL expert. Based on the schema and question, write a valid SQL query.\\n\\n\"\n        \"⚠️ Rules:\\n\"\n        \"- Only use tables and columns from the schema.\\n\"\n        \"- Do not make up names or values.\\n\"\n        \"- Return only valid SQL (no markdown).\\n\\n\"",
        "detail": "askmydb.llm.sql_prompt",
        "documentation": {}
    },
    {
        "label": "build_system_prompt",
        "kind": 2,
        "importPath": "askmydb.llm.sql_prompt",
        "description": "askmydb.llm.sql_prompt",
        "peekOfCode": "def build_system_prompt() -> str:\n    \"\"\"\n    Build a system prompt for SQL generation from any LLM provider.\n    \"\"\"\n    system_prompt = (\n        \"You are an expert SQL generator. Given a database schema and a user question, \"\n        \"generate a syntactically valid and executable SQL query. \"\n        \"Only return the raw SQL (no explanations or markdown formatting). \"\n        \"Avoid using columns or aliases that are not defined. \"\n        \"Ensure all subqueries are logically and syntactically correct, \"",
        "detail": "askmydb.llm.sql_prompt",
        "documentation": {}
    },
    {
        "label": "load_schema",
        "kind": 2,
        "importPath": "askmydb.schema.loader",
        "description": "askmydb.schema.loader",
        "peekOfCode": "def load_schema(db_url:str) -> str:\n    \"\"\"\n    Load the database schema from the given URL.\n    Args:\n        db_url (str): The database URL.\n    Returns:\n        str: The database schema.\n    \"\"\"\n    engine = create_engine(db_url)\n    inspector = inspect(engine)",
        "detail": "askmydb.schema.loader",
        "documentation": {}
    },
    {
        "label": "execute_sql",
        "kind": 2,
        "importPath": "askmydb.sql.executor",
        "description": "askmydb.sql.executor",
        "peekOfCode": "def execute_sql(query: str, db_url: str, limit: int = 10, offset: int = 0):\n    # Create a connection to the database\n    \"\"\"\n    Execute a SQL query on the database and return the results.\n    Args:\n        query (str): _description_\n        db_url (str): _description_\n        limit (int, optional): _description_. Defaults to 10.\n        offset (int, optional): _description_. Defaults to 0.\n    \"\"\"",
        "detail": "askmydb.sql.executor",
        "documentation": {}
    },
    {
        "label": "AskMyDB",
        "kind": 6,
        "importPath": "askmydb.askmydb",
        "description": "askmydb.askmydb",
        "peekOfCode": "class AskMyDB:\n    def __init__(self, db_url: str, llm: LLMProvider):\n        \"\"\"        \n        Core class for AskDB.\n        Args:\n            db_url (str): _database URL_.\n            llm (LLMProvider): _LLM provider_.\n        \"\"\"\n        self.db_url = db_url\n        self.llm = llm",
        "detail": "askmydb.askmydb",
        "documentation": {}
    },
    {
        "label": "AskDB",
        "kind": 6,
        "importPath": "build.lib.askdb.askdb",
        "description": "build.lib.askdb.askdb",
        "peekOfCode": "class AskDB:\n    def __init__(self, db_url: str, llm: LLMProvider):\n        \"\"\"        \n        Core class for AskDB.\n        Args:\n            db_url (str): _database URL_.\n            llm (LLMProvider): _LLM provider_.\n        \"\"\"\n        self.db_url = db_url\n        self.llm = llm",
        "detail": "build.lib.askdb.askdb",
        "documentation": {}
    },
    {
        "label": "setup_sample_db",
        "kind": 2,
        "importPath": "examples.run_dummy",
        "description": "examples.run_dummy",
        "peekOfCode": "def setup_sample_db():\n    conn = sqlite3.connect(\"test.db\")\n    cur = conn.cursor()\n    cur.execute(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\n    cur.execute(\"INSERT INTO users (name, age) VALUES ('Alice', 30), ('Bob', 25)\")\n    conn.commit()\n    conn.close()\nif __name__ == \"__main__\":\n    setup_sample_db()\n    db = AskMyDB(db_url=db_url, llm=DummyLLM())",
        "detail": "examples.run_dummy",
        "documentation": {}
    },
    {
        "label": "db_url",
        "kind": 5,
        "importPath": "examples.run_dummy",
        "description": "examples.run_dummy",
        "peekOfCode": "db_url = \"sqlite:///test.db\"\ndef setup_sample_db():\n    conn = sqlite3.connect(\"test.db\")\n    cur = conn.cursor()\n    cur.execute(\"CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY, name TEXT, age INTEGER)\")\n    cur.execute(\"INSERT INTO users (name, age) VALUES ('Alice', 30), ('Bob', 25)\")\n    conn.commit()\n    conn.close()\nif __name__ == \"__main__\":\n    setup_sample_db()",
        "detail": "examples.run_dummy",
        "documentation": {}
    },
    {
        "label": "ollama_provider",
        "kind": 2,
        "importPath": "tests.test_ollama_provider",
        "description": "tests.test_ollama_provider",
        "peekOfCode": "def ollama_provider():\n    \"\"\"\n    Fixture to create an instance of the OllamaProvider class.\n    \"\"\"\n    return OllamaProvider(base_url=\"http://localhost:32768\", model=\"qwen2.5:1.5b\")\ndef test_generate_sql_basic(ollama_provider):\n    \"\"\"\n    Test the generate_sql method with a basic query.\n    \"\"\"\n    schema = \"\"\"",
        "detail": "tests.test_ollama_provider",
        "documentation": {}
    },
    {
        "label": "test_generate_sql_basic",
        "kind": 2,
        "importPath": "tests.test_ollama_provider",
        "description": "tests.test_ollama_provider",
        "peekOfCode": "def test_generate_sql_basic(ollama_provider):\n    \"\"\"\n    Test the generate_sql method with a basic query.\n    \"\"\"\n    schema = \"\"\"\n    Table: users\n      Column: id - Type: INTEGER\n      Column: name - Type: TEXT\n    \"\"\"\n    query = \"Get all users\"",
        "detail": "tests.test_ollama_provider",
        "documentation": {}
    },
    {
        "label": "test_invalid_schema_handling",
        "kind": 2,
        "importPath": "tests.test_ollama_provider",
        "description": "tests.test_ollama_provider",
        "peekOfCode": "def test_invalid_schema_handling(ollama_provider):\n    \"\"\"\n    Test the generate_sql method with an invalid schema.\n    \"\"\"\n    schema = \"\"\"\n    \"\"\"\n    query = \"Get all users\"\n    sql = ollama_provider.generate_sql(query,schema=schema)\n    assert isinstance(sql,str), \"SQL should be a string\"",
        "detail": "tests.test_ollama_provider",
        "documentation": {}
    }
]